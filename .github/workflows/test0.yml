name: PR Title Checker

on:
  pull_request:
    types:
      - edited
      - closed
    branches:
      - main
    paths-ignore:
      - '.github/**'

jobs:
  check-version-and-title:
    runs-on: ubuntu-latest

    steps:
      - name: Check if this is a title edit or PR merge
        id: check_event
        run: |
          if [[ "${{ github.event.action }}" == "edited" && -z "${{ github.event.changes.title }}" ]]; then
            echo "Non-title edit detected. Skipping..."
            exit 0
          fi
          if [[ "${{ github.event.action }}" == "edited" ]]; then
            TITLE="${{ github.event.pull_request.title }}"
            echo "PR Title: $TITLE"
            if ! [[ $TITLE =~ WORKFLOW-RETRY-[0-9]+ ]]; then
              echo "No WORKFLOW-RETRY pattern detected. Skipping..."
              exit 0
            fi
          fi

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: git fetch --tags

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "0.0.0")
          echo "Latest tag: $latest_tag"
          echo "::set-output name=latest_tag::$latest_tag"

      - name: Extract version from build.gradle
        id: extract_version
        run: |
          version=$(grep '^version' build.gradle | sed 's/version[[:space:]]*=[[:space:]]*//;s/"//g')
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "Build.gradle version: $version"

      - name: Check PR Title
        id: check_pr_title
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $TITLE"
          if ! [[ $TITLE =~ ^Release[[:space:]][0-9]+\.[0-9]+\.[0-9]+(-pre-alpha|-alpha|-beta)?$ ]]; then
            echo "PR 제목 형식이 올바르지 않습니다. 다음과 같은 형식을 지켜주세요: 'Release X.X.X(-pre-alpha|-alpha|-beta)'"
            exit 1
          fi
          pr_version=$(echo $TITLE | grep -oP '[0-9]+\.[0-9]+\.[0-9]+(-pre-alpha|-alpha|-beta)?')
          echo "PR Version: $pr_version"
          echo "PR_VERSION=$pr_version" >> $GITHUB_ENV

      - name: Compare PR and build.gradle versions
        run: |
          if [ ${{ env.VERSION }} != ${{ env.PR_VERSION }} ]; then
            echo "PR 제목의 버전 (${ env.PR_VERSION })과 build.gradle의 버전 (${ env.VERSION })이 일치하지 않습니다. - FAIL"
            exit 1
          else
            echo "PR 제목의 버전과 build.gradle의 버전이 일치합니다. - SUCCESS"
          fi

      - name: Compare versions with latest tag
        run: |
          latest_tag="${{ steps.get_latest_tag.outputs.latest_tag }}"
          current_version="${{ env.VERSION }}"

          IFS='.' read -r -a latest_parts <<< "$latest_tag"
          IFS='.' read -r -a current_parts <<< "$current_version"

          latest_major=${latest_parts[0]}
          latest_minor=${latest_parts[1]}
          latest_patch=${latest_parts[2]}

          current_major=${current_parts[0]}
          current_minor=${current_parts[1]}
          current_patch=${current_parts[2]}

          major_diff=$((current_major - latest_major))
          minor_diff=$((current_minor - latest_minor))
          patch_diff=$((current_patch - latest_patch))

          echo "Latest version: $latest_major.$latest_minor.$latest_patch"
          echo "Current version: $current_major.$current_minor.$current_patch"

          if [ "$major_diff" -gt 1 ] || [ "$major_diff" -lt 0 ]; then
            echo "Major version can only be incremented by 1."
            exit 1
          fi

          if [ "$major_diff" -eq 1 ]; then
            if [ "$current_minor" -ne 0 ] || [ "$current_patch" -ne 0 ]; then
              echo "When incrementing major version, minor and patch versions must be reset to 0."
              exit 1
            fi
          fi

          if [ "$minor_diff" -gt 1 ] || [ "$minor_diff" -lt 0 ]; then
            echo "Minor version can only be incremented by 1."
            exit 1
          fi

          if [ "$minor_diff" -eq 1 ]; then
            if [ "$current_patch" -ne 0 ]; then
              echo "When incrementing minor version, patch version must be reset to 0."
              exit 1
            fi
          fi

          if [ "$patch_diff" -gt 1 ] || [ "$patch_diff" -lt 0 ]; then
            echo "Patch version can only be incremented by 1."
            exit 1
          fi

          echo "Version increment is valid."

      - name: Comment retry count
        if: ${{ github.event.action == 'edited' && steps.check_event.outputs.retry_count }}
        run: |
          retry_count=$(echo ${{ github.event.pull_request.title }} | grep -oP 'WORKFLOW-RETRY-\K[0-9]+')
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -X POST \
               -d '{"body": "Workflow retried '$retry_count' times"}' \
               "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
